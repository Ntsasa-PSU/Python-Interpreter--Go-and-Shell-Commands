from interp_fun import Add, Sub, Mul, Div, Neg, Let, Name, Lit, Command, Pipe, Redirect, Ifnz, Letfun, App, Expr, run

from lark import Lark, Token, ParseTree, Transformer
from lark.exceptions import VisitError
from pathlib import Path

parser = Lark(Path('expr_fun.lark').read_text(),start='expr', parser='earley',ambiguity='explicit')

class ParseError(Exception): 
    pass

def parse(s:str) -> ParseTree:
    try:
        return parser.parse(s)
    except Exception as e:
        raise ParseError(e)

class AmbiguousParse(Exception):
    pass

class ToExpr(Transformer[Token,Expr]):
    '''Defines a transformation from a parse tree into an AST'''
    # This is structured as a "fold" over the parse tree.
    # There is a method for each named ("aliased") rule in the grammar,
    # invoked on nodes generated by that rule. 
    # The args are the _result_ of recursively 
    # applying the transformer to the children of the node
    # (we do not have to write the recursive calls explicitly).
    # For leaf nodes, the argument is a Token; the string that
    # actually makes up the token is in the .value field.
    # (We cheat by declaring the args as tuples rather than lists, since
    # this let's us be more precise about the types of the elements.)
    # Fail if tree contains ambiguity markers
    def plus(self, args:tuple[Expr,Expr]) -> Expr:
        return Add(args[0],args[1])
    def times(self, args:tuple[Expr,Expr]) -> Expr:
        return Mul(args[0],args[1])
    def minus(self, args:tuple[Expr,Expr]) -> Expr:
        return Sub(args[0],args[1])
    def divide(self, args:tuple[Expr,Expr]) -> Expr:
        return Div(args[0],args[1])
    def neg(self, args:tuple[Expr]) -> Expr:
        return Neg(args[0])
    def let(self, args:tuple[Token,Expr,Expr]) -> Expr:
        return Let(args[0].value,args[1],args[2]) 
    def id(self, args:tuple[Token]) -> Expr:
        return Name(args[0].value)
    def int(self,args:tuple[Token]) -> Expr:
        return Lit(int(args[0].value))
    def ifnz(self,args:tuple[Expr,Expr,Expr]) -> Expr:
        return Ifnz(args[0],args[1],args[2])
    def letfun(self,args:tuple[Token,Token,Expr,Expr]) -> Expr:
        return Letfun(args[0].value,args[1].value,args[2],args[3])
    def app(self,args:tuple[Expr,Expr]) -> Expr:
        return App(args[0],args[1]) 
    
    def command(self, args: tuple[Token]) -> Expr:
        # Remove backticks and get the command string
        cmd_str = args[0].value[1:-1].strip()
        return Command(cmd_str)
    
    def pipe(self, args:tuple[Expr,Expr]) -> Expr:
        return Pipe(args[0], args[1])
    
    def redirect(self, args:tuple[Expr,Token,Expr]) -> Expr:
        return Redirect(args[0], "stdout", args[1])
    
    def _ambig(self,_) -> Expr:    # ambiguity marker
        raise AmbiguousParse()


def genAST(t:ParseTree) -> Expr:
    '''Applies the transformer to convert a parse tree into an AST'''
    # boilerplate to catch potential ambiguity error raised by transformer
    try:
        return ToExpr().transform(t)               
    except VisitError as e:
        if isinstance(e.orig_exc,AmbiguousParse):
            raise AmbiguousParse()
        else:
            raise e
        
def parse_and_run(s: str) -> None:
    """Parse string s into an AST and run it"""
    try:
        tree = parse(s)
        ast = genAST(tree)
        return run(ast)
    except ParseError as e:
        print(f"Parse error: {e}")
    except AmbiguousParse:
        print("Ambiguous parse")
        
print("Shell command test:")
parse_and_run('`ls -l`')
    